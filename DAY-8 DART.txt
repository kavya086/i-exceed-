DART PROGRAMMING
VARIABLES:

Variables are named memory spaces where values are stored.
In Dart, there are 2 types of variables. They are,

1.STATIC variable:

void main()
{
  var a=10; //inferred statically as int at compile-time
  var b=10.9; //as double
  var c=true; //as bool
  var d="Dart"; //as String
 
  print(a.runtimeType);
  print(b.runtimeType);
  print(c.runtimeType);
  print(d.runtimeType);
}

OUTPUT:

int
double
bool
String


2.DYNAMIC variable.

void main()
{
  dynamic a=10; //a is inferred as int first
  print(a.runtimeType);
  a=10.9; //a is then inferred as double
  print(a.runtimeType);
  a=true; //a is then inferred as boolean
  print(a.runtimeType);
  a="Dart"; //a is then inferred as String
  print(a.runtimeType);
}

OUTPUT:

int
double
bool
String


DATA TYPES:

1.int       - to store integer values (without decimals) [Values from -2^63 to 2^63 - 1]
2.double    - to store floating point values AND exponents(decimals)
3.bool      - to store boolean values (True or False)
4.String    - to store characters or sequence of characters (letters or words)

NOTE:

1.Keyword "var" - infers the type of the variable itself at compile-time.
1.Keyword "num" is used commonly for numbers for both int and double.
2.Keyword "float" is not used in DART.



int:

void main()
{
  var a=10; //a will be inferred as an integer with the value of 10
  print(a);
  print(a.runtimeType);
  print("$a is of type ${a.runtimeType}"); //$identifier is used and ${expression} is used ->
  {} can be avoided if it is a identifier, {} is must if it is a expression
 
  var c=10.00; //c will be inferred as an integer(not double) with the value of 10 (.00 is ignored)
  print(c);
  print(c.runtimeType);
  print("$c is of type ${c.runtimeType}");
}

OUTPUT:

10
int
10 is of type int
10
int
10 is of type int

BigInt:

Integer values that are above the int limit ie, 2^63 to 2^63-1 can be stored as BigInt.


EXAMPLE:

void main()
{
  BigInt y=BigInt.from(9223372036854775807); //9223372036854775807 considered as int -> in limit -2^63 to 2^63-1
  print(y);
  BigInt x=BigInt.parse('922337123459223371234567876543220368547758076787654322036854775807'); //considered as String
  print(x);
}   

OUTPUT:

9223372036854775807
922337123459223371234567876543220368547758076787654322036854775807


double:

void main()
{
  var a=10.990; //a will be inferred as an double with the value of 10.99
  print(a);
  print(a.runtimeType);
  print("$a is of type ${a.runtimeType}");

  var c=10.00; //c will be inferred as an integer(not double) with the value of 10 (.00 is ignored)
  print(c);
  print(c.runtimeType);
  print("$c is of type ${c.runtimeType}");

  var d=1.2345E2; //c will be equal to 1.2345*10^2 ie, 1.2345*100 = 123.45 ,it is a double
  print(d);
  print(d.runtimeType);
  print("$d is of type ${d.runtimeType}");

}

OUTPUT:

10.99
double
10.99 is of type double
10
int
10 is of type int
123.45
double
123.45 is of type double


num:

void main()
{
  num a=10;  //int
  num b=10.9;  //double
  print(a.runtimeType);
  print(b.runtimeType);
 
}
 
OUTPUT:

int
double



void main()
{
  num a=0.1;  //double
  num b=0.2;//double
 
  num sum=a+b; //double
  print(sum);
  print(a.runtimeType);
  print(b.runtimeType);
  print(sum.runtimeType);
 
}


OUTPUT:

0.30000000000000004
double
double
double


bool:


void main()
{
  int age=20;
  bool isAbove18;
 
  isAbove18=age>18?true:false;
 
  if(isAbove18)
  {
    print("You are above 18");
  }
  else
  {
    print("You are below 18");
  }
}

OUTPUT:

You are above 18



String:

void main()
{
var s1 = 'It is a String';
var s2 = "It is also a String";
var s3 = 'It\'s a String too with a delimiter or escape sequence';
var s4 = "It's too";
  print("$s1 $s2 $s3 $s4");
}

OUTPUT:

It is a String It is also a String It's a String too with a delimiter or escape sequence It's too


Raw String:

void main()
{
  String str="Hel\nlooo${1+1}";
  String str2=r"Hel\nlooo${1+1}"; //when preceded with r , the given string is considered as RAW STRING which ignores all the interpolation, escape sequence and consider as a pure string.
  print(str);
  print(str2);
 
   print(r"Hellooo${1+1}");
}


OUTPUT:

Hel
looo2
Hel\nlooo${1+1}
Hellooo${1+1}
